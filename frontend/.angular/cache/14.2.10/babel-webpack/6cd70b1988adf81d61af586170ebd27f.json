{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/kosov/OneDrive/Dokumenti/UredjivanjeProstoraAPP/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./korisnik.service\";\nexport class AgencijaService {\n  constructor(http, korisnikServis) {\n    this.http = http;\n    this.korisnikServis = korisnikServis;\n    this.url = 'http://localhost:4000';\n  }\n\n  provera(agencija) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (agencija.korisnickoIme == '') {\n        return 'Korisnicko ime je obavezno polje';\n      }\n\n      if (yield _this.korisnikServis.korisnikPostoji(agencija.korisnickoIme)) {\n        return 'Korisnicko ime vec postoji';\n      }\n\n      if (agencija.lozinka == '') {\n        return 'Lozinka je obavezno polje';\n      }\n\n      let provera = _this.korisnikServis.proveraLozinke(agencija.lozinka);\n\n      if (provera != 'ok') {\n        return provera;\n      }\n\n      if (agencija.telefon == '') {\n        return 'Telefon je obavezno polje';\n      }\n\n      if (agencija.mejl == '') {\n        return 'Mejl je obavezno polje';\n      }\n\n      if (agencija.naziv == '') {\n        return 'Naziv je obavezno polje';\n      }\n\n      if (agencija.ulica == '') {\n        return 'Ulica je obavezno polje';\n      }\n\n      if (agencija.grad == '') {\n        return 'Grad je obavezno polje';\n      }\n\n      if (agencija.drzava == '') {\n        return 'Drzava je obavezno polje';\n      }\n\n      if (agencija.maticniBroj == '') {\n        return 'Maticni broj je obavezno polje';\n      }\n\n      if (agencija.opis == '') {\n        return 'Opis je obavezno polje';\n      }\n\n      return 'ok';\n    })();\n  }\n\n  registracija(agencija) {\n    const podaci = {\n      korisnickoIme: agencija.korisnickoIme,\n      telefon: agencija.telefon,\n      mejl: agencija.mejl,\n      slika: agencija.slika,\n      naziv: agencija.naziv,\n      ulica: agencija.ulica,\n      grad: agencija.grad,\n      drzava: agencija.drzava,\n      maticniBroj: agencija.maticniBroj,\n      opis: agencija.opis\n    };\n    return this.http.post(`${this.url}/agencija/registracija`, podaci);\n  }\n\n  azurirajPodatak(korisnickoIme, podatak, vrednost) {\n    return this.http.post(`${this.url}/agencija/azurirajPodatak`, {\n      korisnickoIme: korisnickoIme,\n      podatak: podatak,\n      vrednost: vrednost\n    });\n  }\n\n  azurirajAgenciju(korisnickoIme, telefon, mejl, slika, naziv, ulica, grad, drzava, maticniBroj, opis) {\n    const agencija = {\n      korisnickoIme: korisnickoIme,\n      telefon: telefon,\n      mejl: mejl,\n      slika: slika,\n      naziv: naziv,\n      ulica: ulica,\n      grad: grad,\n      drzava: drzava,\n      maticniBroj: maticniBroj,\n      opis: opis\n    };\n    return this.http.post(`${this.url}/agencija/azurirajAgenciju`, agencija);\n  }\n\n  dohvatiAgenciju(korisnickoIme) {\n    return this.http.post(`${this.url}/agencija/dohvatiAgenciju`, {\n      korisnickoIme: korisnickoIme\n    });\n  }\n\n}\n\nAgencijaService.ɵfac = function AgencijaService_Factory(t) {\n  return new (t || AgencijaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.KorisnikService));\n};\n\nAgencijaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AgencijaService,\n  factory: AgencijaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["AgencijaService","constructor","http","korisnikServis","provera","agencija","korisnickoIme","korisnikPostoji","lozinka","proveraLozinke","telefon","mejl","naziv","ulica","grad","drzava","maticniBroj","opis","registracija","podaci","slika","post","url","azurirajPodatak","podatak","vrednost","azurirajAgenciju","dohvatiAgenciju","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\kosov\\OneDrive\\Dokumenti\\UredjivanjeProstoraAPP\\frontend\\src\\app\\services\\agencija.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { KorisnikService } from './korisnik.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AgencijaService {\n  constructor(\n    private http: HttpClient,\n    private korisnikServis: KorisnikService\n  ) {}\n\n  url = 'http://localhost:4000';\n\n  async provera(agencija) {\n    if (agencija.korisnickoIme == '') {\n      return 'Korisnicko ime je obavezno polje';\n    }\n    if (await this.korisnikServis.korisnikPostoji(agencija.korisnickoIme)) {\n      return 'Korisnicko ime vec postoji';\n    }\n    if (agencija.lozinka == '') {\n      return 'Lozinka je obavezno polje';\n    }\n    let provera = this.korisnikServis.proveraLozinke(agencija.lozinka);\n    if (provera != 'ok') {\n      return provera;\n    }\n    if (agencija.telefon == '') {\n      return 'Telefon je obavezno polje';\n    }\n    if (agencija.mejl == '') {\n      return 'Mejl je obavezno polje';\n    }\n    if (agencija.naziv == '') {\n      return 'Naziv je obavezno polje';\n    }\n    if (agencija.ulica == '') {\n      return 'Ulica je obavezno polje';\n    }\n    if (agencija.grad == '') {\n      return 'Grad je obavezno polje';\n    }\n    if (agencija.drzava == '') {\n      return 'Drzava je obavezno polje';\n    }\n    if (agencija.maticniBroj == '') {\n      return 'Maticni broj je obavezno polje';\n    }\n    if (agencija.opis == '') {\n      return 'Opis je obavezno polje';\n    }\n\n    return 'ok';\n  }\n\n  registracija(agencija) {\n    const podaci = {\n      korisnickoIme: agencija.korisnickoIme,\n      telefon: agencija.telefon,\n      mejl: agencija.mejl,\n      slika: agencija.slika,\n      naziv: agencija.naziv,\n      ulica: agencija.ulica,\n      grad: agencija.grad,\n      drzava: agencija.drzava,\n      maticniBroj: agencija.maticniBroj,\n      opis: agencija.opis,\n    };\n    return this.http.post(`${this.url}/agencija/registracija`, podaci);\n  }\n\n  azurirajPodatak(korisnickoIme, podatak, vrednost) {\n    return this.http.post(`${this.url}/agencija/azurirajPodatak`, {\n      korisnickoIme: korisnickoIme,\n      podatak: podatak,\n      vrednost: vrednost,\n    });\n  }\n\n  azurirajAgenciju(\n    korisnickoIme,\n    telefon,\n    mejl,\n    slika,\n    naziv,\n    ulica,\n    grad,\n    drzava,\n    maticniBroj,\n    opis\n  ) {\n    const agencija = {\n      korisnickoIme: korisnickoIme,\n      telefon: telefon,\n      mejl: mejl,\n      slika: slika,\n      naziv: naziv,\n      ulica: ulica,\n      grad: grad,\n      drzava: drzava,\n      maticniBroj: maticniBroj,\n      opis: opis,\n    };\n\n    return this.http.post(`${this.url}/agencija/azurirajAgenciju`, agencija);\n  }\n\n  dohvatiAgenciju(korisnickoIme) {\n    return this.http.post(`${this.url}/agencija/dohvatiAgenciju`, {\n      korisnickoIme: korisnickoIme,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
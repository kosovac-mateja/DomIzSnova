{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/kosov/OneDrive/Dokumenti/UredjivanjeProstoraAPP/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./korisnik.service\";\nimport * as i2 from \"./agencija.service\";\nimport * as i3 from \"./klijent.service\";\nexport class ProveraService {\n  constructor(korisnikServis, agencijaServis, klijentServis) {\n    this.korisnikServis = korisnikServis;\n    this.agencijaServis = agencijaServis;\n    this.klijentServis = klijentServis;\n  }\n\n  proveraKorisnickoIme(korisnickoIme) {\n    if (korisnickoIme.length < 3 || korisnickoIme.length > 20) {\n      return 'Korisnicko ime mora imati izmedju 3 i 20 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9]+$/;\n\n    if (!regex.test(korisnickoIme)) {\n      return 'Korisnicko ime moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraLozinka(lozinka) {\n    if (lozinka.length < 7 || lozinka.length > 12) {\n      return 'Lozinka mora imati izmedju 7 i 12 karaktera';\n    }\n\n    const prviKarakter = lozinka.charAt(0);\n\n    if (!/[a-zA-Z]/.test(prviKarakter)) {\n      return 'Lozinka mora pocinjati slovom';\n    }\n\n    const regex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#$%&*_\\-+=/|:;,.<>?]).*$/;\n\n    if (!regex.test(lozinka)) {\n      return 'Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter';\n    }\n\n    return 'ok';\n  }\n\n  proveraTelefon(telefon) {\n    const regex = /^\\+\\d{11,12}$/;\n\n    if (!regex.test(telefon)) {\n      return 'Telefon mora biti u formatu +381xxxxxxxxx';\n    }\n\n    return 'ok';\n  }\n\n  proveraMejl(mejl) {\n    const regex = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-z]+$/;\n\n    if (!regex.test(mejl)) {\n      return 'Neispravno uneta mejl adresa';\n    }\n\n    return 'ok';\n  }\n\n  proveraIme(ime) {\n    if (ime.length < 2 || ime.length > 20) {\n      return 'Ime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(ime)) {\n      return 'Ime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraPrezime(prezime) {\n    if (prezime.length < 2 || prezime.length > 20) {\n      return 'Prezime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(prezime)) {\n      return 'Prezime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraNazivAgencije(naziv) {\n    if (naziv.length < 3 || naziv.length > 30) {\n      return 'Naziv agencije mora imati izmedju 3 i 30 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9\\s]+$/;\n\n    if (!regex.test(naziv)) {\n      return 'Naziv moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraUlica(ulica) {\n    if (ulica.length < 3 || ulica.length > 40) {\n      return 'Naziv ulice mora imati izmedju 3 i 40 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+ \\d{1,4}[A-Z]{0,2}$/;\n\n    if (!regex.test(ulica)) {\n      return 'Neispravno unet naziv ulice';\n    }\n\n    return 'ok';\n  }\n\n  proveraGrad(grad) {\n    if (grad.length < 2 || grad.length > 30) {\n      return 'Naziv grada mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n\n    if (!regex.test(grad)) {\n      return 'Neispravno unet naziv grada';\n    }\n\n    return 'ok';\n  }\n\n  proveraDrzava(drzava) {\n    if (drzava.length < 2 || drzava.length > 30) {\n      return 'Naziv drzave mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n\n    if (!regex.test(drzava)) {\n      return 'Neispravno unet naziv drzave';\n    }\n\n    return 'ok';\n  }\n\n  proveraMaticniBroj(maticniBroj) {\n    if (maticniBroj.length != 8) {\n      return 'Maticni broj mora imati tacno 8 cifara';\n    }\n\n    const regex = /^\\d{8}$/;\n\n    if (!regex.test(maticniBroj)) {\n      return 'Maticni broj moze sadrzati samo cifre';\n    }\n\n    return 'ok';\n  }\n\n  proveraKlijent(klijent, azuriranje = false) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!azuriranje && _this.proveraKorisnickoIme(klijent.korisnickoIme) != 'ok') {\n        return _this.proveraKorisnickoIme(klijent.korisnickoIme);\n      }\n\n      if ((!azuriranje && (yield _this.korisnikServis.korisnikPostoji(klijent.korisnickoIme))) == true) {\n        return 'Korisnicko ime vec postoji';\n      }\n\n      if (!azuriranje && _this.proveraLozinka(klijent.lozinka) != 'ok') {\n        return _this.proveraLozinka(klijent.lozinka);\n      }\n\n      if (_this.proveraTelefon(klijent.telefon) != 'ok') {\n        return _this.proveraTelefon(klijent.telefon);\n      }\n\n      if (_this.proveraMejl(klijent.mejl) != 'ok') {\n        return _this.proveraMejl(klijent.mejl);\n      }\n\n      if (!azuriranje && (yield _this.klijentServis.mejlPostoji(klijent.mejl)) == true) {\n        return 'Mejl adresa vec postoji';\n      }\n\n      if (!azuriranje && (yield _this.agencijaServis.mejlPostoji(klijent.mejl)) == true) {\n        return 'Mejl adresa vec postoji';\n      }\n\n      if (_this.proveraIme(klijent.ime) != 'ok') {\n        return _this.proveraIme(klijent.ime);\n      }\n\n      if (_this.proveraPrezime(klijent.prezime) != 'ok') {\n        return _this.proveraPrezime(klijent.prezime);\n      }\n\n      return 'ok';\n    })();\n  }\n\n  proveraAgencija(agencija, azuriranje = false) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!azuriranje && _this2.proveraKorisnickoIme(agencija.korisnickoIme) != 'ok') {\n        return _this2.proveraKorisnickoIme(agencija.korisnickoIme);\n      }\n\n      if ((!azuriranje && (yield _this2.korisnikServis.korisnikPostoji(agencija.korisnickoIme))) == true) {\n        return 'Korisnicko ime vec postoji';\n      }\n\n      if (!azuriranje && _this2.proveraLozinka(agencija.lozinka) != 'ok') {\n        return _this2.proveraLozinka(agencija.lozinka);\n      }\n\n      if (_this2.proveraTelefon(agencija.telefon) != 'ok') {\n        return _this2.proveraTelefon(agencija.telefon);\n      }\n\n      if (_this2.proveraMejl(agencija.mejl) != 'ok') {\n        return _this2.proveraMejl(agencija.mejl);\n      }\n\n      if (!azuriranje && (yield _this2.klijentServis.mejlPostoji(agencija.mejl)) == true) {\n        return 'Mejl adresa vec postoji';\n      }\n\n      if (!azuriranje && (yield _this2.agencijaServis.mejlPostoji(agencija.mejl)) == true) {\n        return 'Mejl adresa vec postoji';\n      }\n\n      if (_this2.proveraNazivAgencije(agencija.naziv) != 'ok') {\n        return _this2.proveraNazivAgencije(agencija.naziv);\n      }\n\n      if (_this2.proveraUlica(agencija.ulica) != 'ok') {\n        return _this2.proveraUlica(agencija.ulica);\n      }\n\n      if (_this2.proveraGrad(agencija.grad) != 'ok') {\n        return _this2.proveraGrad(agencija.grad);\n      }\n\n      if (_this2.proveraDrzava(agencija.drzava) != 'ok') {\n        return _this2.proveraDrzava(agencija.drzava);\n      }\n\n      if (_this2.proveraMaticniBroj(agencija.maticniBroj) != 'ok') {\n        return _this2.proveraMaticniBroj(agencija.maticniBroj);\n      }\n\n      return 'ok';\n    })();\n  }\n\n  proveraRadnik(radnik) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.proveraIme(radnik.ime) != 'ok') {\n        return _this3.proveraIme(radnik.ime);\n      }\n\n      if (_this3.proveraPrezime(radnik.prezime) != 'ok') {\n        return _this3.proveraPrezime(radnik.prezime);\n      }\n\n      if (_this3.proveraTelefon(radnik.telefon) != 'ok') {\n        return _this3.proveraTelefon(radnik.telefon);\n      }\n\n      if (_this3.proveraMejl(radnik.mejl) != 'ok') {\n        return _this3.proveraMejl(radnik.mejl);\n      }\n\n      return 'ok';\n    })();\n  }\n\n  proveraObjekatJSON(tip, adresa, brProstorija, kvadratura, koordinate, dimenzije, koordinateVrata) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (tip == null || tip == undefined || tip == '') {\n        return 'Tip objekta nije unet';\n      }\n\n      if (adresa == null || adresa == undefined || adresa == '') {\n        return 'Adresa objekta nije uneta';\n      }\n\n      if (brProstorija == null || brProstorija == undefined || brProstorija < 1) {\n        return 'Broj prostorija nije unet';\n      }\n\n      if (kvadratura == null || kvadratura == undefined || kvadratura < 1) {\n        return 'Kvadratura nije uneta';\n      }\n\n      if (koordinate == null || koordinate == undefined || koordinate.length == 0) {\n        return 'Koordinate nisu unete';\n      }\n\n      if (dimenzije == null || dimenzije == undefined || dimenzije.length == 0) {\n        return 'Dimenzije nisu unete';\n      }\n\n      if (koordinateVrata == null || koordinateVrata == undefined || koordinateVrata.length == 0) {\n        return 'Koordinate vrata nisu unete';\n      }\n\n      if (tip != 'stan' && tip != 'kuca') {\n        return 'Tip objekta moze biti samo stan ili kuca';\n      }\n\n      if (brProstorija < 1 || brProstorija > 3) {\n        return 'Broj prostorija moze biti 1, 2 ili 3';\n      }\n\n      let proveraAdrese = yield _this4.proveraUlica(adresa);\n\n      if (proveraAdrese != 'ok') {\n        return proveraAdrese;\n      }\n\n      if (kvadratura < 0) {\n        return 'Kvadratura ne moze biti negativna';\n      }\n\n      return 'ok';\n    })();\n  }\n\n}\n\nProveraService.ɵfac = function ProveraService_Factory(t) {\n  return new (t || ProveraService)(i0.ɵɵinject(i1.KorisnikService), i0.ɵɵinject(i2.AgencijaService), i0.ɵɵinject(i3.KlijentService));\n};\n\nProveraService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProveraService,\n  factory: ProveraService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["ProveraService","constructor","korisnikServis","agencijaServis","klijentServis","proveraKorisnickoIme","korisnickoIme","length","regex","test","proveraLozinka","lozinka","prviKarakter","charAt","proveraTelefon","telefon","proveraMejl","mejl","proveraIme","ime","proveraPrezime","prezime","proveraNazivAgencije","naziv","proveraUlica","ulica","proveraGrad","grad","proveraDrzava","drzava","proveraMaticniBroj","maticniBroj","proveraKlijent","klijent","azuriranje","korisnikPostoji","mejlPostoji","proveraAgencija","agencija","proveraRadnik","radnik","proveraObjekatJSON","tip","adresa","brProstorija","kvadratura","koordinate","dimenzije","koordinateVrata","undefined","proveraAdrese","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\kosov\\OneDrive\\Dokumenti\\UredjivanjeProstoraAPP\\frontend\\src\\app\\services\\provera.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { KorisnikService } from './korisnik.service';\nimport { Koordinata } from '../models/koordinata';\nimport { Dimenzije } from '../models/dimenzije';\nimport { AgencijaService } from './agencija.service';\nimport { KlijentService } from './klijent.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProveraService {\n  constructor(\n    private korisnikServis: KorisnikService,\n    private agencijaServis: AgencijaService,\n    private klijentServis: KlijentService\n  ) {}\n\n  proveraKorisnickoIme(korisnickoIme: string) {\n    if (korisnickoIme.length < 3 || korisnickoIme.length > 20) {\n      return 'Korisnicko ime mora imati izmedju 3 i 20 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9]+$/;\n    if (!regex.test(korisnickoIme)) {\n      return 'Korisnicko ime moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraLozinka(lozinka: string) {\n    if (lozinka.length < 7 || lozinka.length > 12) {\n      return 'Lozinka mora imati izmedju 7 i 12 karaktera';\n    }\n\n    const prviKarakter = lozinka.charAt(0);\n    if (!/[a-zA-Z]/.test(prviKarakter)) {\n      return 'Lozinka mora pocinjati slovom';\n    }\n\n    const regex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#$%&*_\\-+=/|:;,.<>?]).*$/;\n    if (!regex.test(lozinka)) {\n      return 'Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter';\n    }\n\n    return 'ok';\n  }\n\n  proveraTelefon(telefon: string) {\n    const regex = /^\\+\\d{11,12}$/;\n    if (!regex.test(telefon)) {\n      return 'Telefon mora biti u formatu +381xxxxxxxxx';\n    }\n\n    return 'ok';\n  }\n\n  proveraMejl(mejl: string) {\n    const regex = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-z]+$/;\n    if (!regex.test(mejl)) {\n      return 'Neispravno uneta mejl adresa';\n    }\n\n    return 'ok';\n  }\n\n  proveraIme(ime: string) {\n    if (ime.length < 2 || ime.length > 20) {\n      return 'Ime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(ime)) {\n      return 'Ime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraPrezime(prezime: string) {\n    if (prezime.length < 2 || prezime.length > 20) {\n      return 'Prezime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(prezime)) {\n      return 'Prezime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraNazivAgencije(naziv: string) {\n    if (naziv.length < 3 || naziv.length > 30) {\n      return 'Naziv agencije mora imati izmedju 3 i 30 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9\\s]+$/;\n    if (!regex.test(naziv)) {\n      return 'Naziv moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraUlica(ulica: string) {\n    if (ulica.length < 3 || ulica.length > 40) {\n      return 'Naziv ulice mora imati izmedju 3 i 40 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+ \\d{1,4}[A-Z]{0,2}$/;\n    if (!regex.test(ulica)) {\n      return 'Neispravno unet naziv ulice';\n    }\n\n    return 'ok';\n  }\n\n  proveraGrad(grad: string) {\n    if (grad.length < 2 || grad.length > 30) {\n      return 'Naziv grada mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n    if (!regex.test(grad)) {\n      return 'Neispravno unet naziv grada';\n    }\n\n    return 'ok';\n  }\n\n  proveraDrzava(drzava: string) {\n    if (drzava.length < 2 || drzava.length > 30) {\n      return 'Naziv drzave mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n    if (!regex.test(drzava)) {\n      return 'Neispravno unet naziv drzave';\n    }\n\n    return 'ok';\n  }\n\n  proveraMaticniBroj(maticniBroj: string) {\n    if (maticniBroj.length != 8) {\n      return 'Maticni broj mora imati tacno 8 cifara';\n    }\n\n    const regex = /^\\d{8}$/;\n    if (!regex.test(maticniBroj)) {\n      return 'Maticni broj moze sadrzati samo cifre';\n    }\n\n    return 'ok';\n  }\n\n  async proveraKlijent(klijent, azuriranje: boolean = false) {\n    if (\n      !azuriranje &&\n      this.proveraKorisnickoIme(klijent.korisnickoIme) != 'ok'\n    ) {\n      return this.proveraKorisnickoIme(klijent.korisnickoIme);\n    }\n    if (\n      (!azuriranje &&\n        (await this.korisnikServis.korisnikPostoji(klijent.korisnickoIme))) ==\n      true\n    ) {\n      return 'Korisnicko ime vec postoji';\n    }\n    if (!azuriranje && this.proveraLozinka(klijent.lozinka) != 'ok') {\n      return this.proveraLozinka(klijent.lozinka);\n    }\n    if (this.proveraTelefon(klijent.telefon) != 'ok') {\n      return this.proveraTelefon(klijent.telefon);\n    }\n    if (this.proveraMejl(klijent.mejl) != 'ok') {\n      return this.proveraMejl(klijent.mejl);\n    }\n    if (\n      !azuriranje &&\n      (await this.klijentServis.mejlPostoji(klijent.mejl)) == true\n    ) {\n      return 'Mejl adresa vec postoji';\n    }\n    if (\n      !azuriranje &&\n      (await this.agencijaServis.mejlPostoji(klijent.mejl)) == true\n    ) {\n      return 'Mejl adresa vec postoji';\n    }\n    if (this.proveraIme(klijent.ime) != 'ok') {\n      return this.proveraIme(klijent.ime);\n    }\n    if (this.proveraPrezime(klijent.prezime) != 'ok') {\n      return this.proveraPrezime(klijent.prezime);\n    }\n\n    return 'ok';\n  }\n\n  async proveraAgencija(agencija, azuriranje: boolean = false) {\n    if (\n      !azuriranje &&\n      this.proveraKorisnickoIme(agencija.korisnickoIme) != 'ok'\n    ) {\n      return this.proveraKorisnickoIme(agencija.korisnickoIme);\n    }\n    if (\n      (!azuriranje &&\n        (await this.korisnikServis.korisnikPostoji(agencija.korisnickoIme))) ==\n      true\n    ) {\n      return 'Korisnicko ime vec postoji';\n    }\n    if (!azuriranje && this.proveraLozinka(agencija.lozinka) != 'ok') {\n      return this.proveraLozinka(agencija.lozinka);\n    }\n    if (this.proveraTelefon(agencija.telefon) != 'ok') {\n      return this.proveraTelefon(agencija.telefon);\n    }\n    if (this.proveraMejl(agencija.mejl) != 'ok') {\n      return this.proveraMejl(agencija.mejl);\n    }\n    if (\n      !azuriranje &&\n      (await this.klijentServis.mejlPostoji(agencija.mejl)) == true\n    ) {\n      return 'Mejl adresa vec postoji';\n    }\n    if (\n      !azuriranje &&\n      (await this.agencijaServis.mejlPostoji(agencija.mejl)) == true\n    ) {\n      return 'Mejl adresa vec postoji';\n    }\n    if (this.proveraNazivAgencije(agencija.naziv) != 'ok') {\n      return this.proveraNazivAgencije(agencija.naziv);\n    }\n    if (this.proveraUlica(agencija.ulica) != 'ok') {\n      return this.proveraUlica(agencija.ulica);\n    }\n    if (this.proveraGrad(agencija.grad) != 'ok') {\n      return this.proveraGrad(agencija.grad);\n    }\n    if (this.proveraDrzava(agencija.drzava) != 'ok') {\n      return this.proveraDrzava(agencija.drzava);\n    }\n    if (this.proveraMaticniBroj(agencija.maticniBroj) != 'ok') {\n      return this.proveraMaticniBroj(agencija.maticniBroj);\n    }\n\n    return 'ok';\n  }\n\n  async proveraRadnik(radnik) {\n    if (this.proveraIme(radnik.ime) != 'ok') {\n      return this.proveraIme(radnik.ime);\n    }\n    if (this.proveraPrezime(radnik.prezime) != 'ok') {\n      return this.proveraPrezime(radnik.prezime);\n    }\n    if (this.proveraTelefon(radnik.telefon) != 'ok') {\n      return this.proveraTelefon(radnik.telefon);\n    }\n    if (this.proveraMejl(radnik.mejl) != 'ok') {\n      return this.proveraMejl(radnik.mejl);\n    }\n\n    return 'ok';\n  }\n\n  async proveraObjekatJSON(\n    tip: string,\n    adresa: string,\n    brProstorija: number,\n    kvadratura: number,\n    koordinate: Koordinata[],\n    dimenzije: Dimenzije[],\n    koordinateVrata: Koordinata[]\n  ) {\n    if (tip == null || tip == undefined || tip == '') {\n      return 'Tip objekta nije unet';\n    }\n    if (adresa == null || adresa == undefined || adresa == '') {\n      return 'Adresa objekta nije uneta';\n    }\n    if (brProstorija == null || brProstorija == undefined || brProstorija < 1) {\n      return 'Broj prostorija nije unet';\n    }\n    if (kvadratura == null || kvadratura == undefined || kvadratura < 1) {\n      return 'Kvadratura nije uneta';\n    }\n    if (\n      koordinate == null ||\n      koordinate == undefined ||\n      koordinate.length == 0\n    ) {\n      return 'Koordinate nisu unete';\n    }\n    if (dimenzije == null || dimenzije == undefined || dimenzije.length == 0) {\n      return 'Dimenzije nisu unete';\n    }\n    if (\n      koordinateVrata == null ||\n      koordinateVrata == undefined ||\n      koordinateVrata.length == 0\n    ) {\n      return 'Koordinate vrata nisu unete';\n    }\n    if (tip != 'stan' && tip != 'kuca') {\n      return 'Tip objekta moze biti samo stan ili kuca';\n    }\n    if (brProstorija < 1 || brProstorija > 3) {\n      return 'Broj prostorija moze biti 1, 2 ili 3';\n    }\n    let proveraAdrese = await this.proveraUlica(adresa);\n    if (proveraAdrese != 'ok') {\n      return proveraAdrese;\n    }\n    if (kvadratura < 0) {\n      return 'Kvadratura ne moze biti negativna';\n    }\n\n    return 'ok';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
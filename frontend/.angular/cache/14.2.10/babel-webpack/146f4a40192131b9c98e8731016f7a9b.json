{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/kosov/OneDrive/Dokumenti/UredjivanjeProstoraAPP/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./korisnik.service\";\nexport class ProveraService {\n  constructor(korisnikServis) {\n    this.korisnikServis = korisnikServis;\n  }\n\n  proveraKorisnickoIme(korisnickoIme) {\n    if (korisnickoIme.length < 3 || korisnickoIme.length > 20) {\n      return 'Korisnicko ime mora imati izmedju 3 i 20 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9]+$/;\n\n    if (!regex.test(korisnickoIme)) {\n      return 'Korisnicko ime moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraLozinka(lozinka) {\n    if (lozinka.length < 7 || lozinka.length > 12) {\n      return 'Lozinka mora imati izmedju 7 i 12 karaktera';\n    }\n\n    const prviKarakter = lozinka.charAt(0);\n\n    if (!/[a-zA-Z]/.test(prviKarakter)) {\n      return 'Lozinka mora pocinjati slovom';\n    }\n\n    const regex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#$%&*_\\-+=/|:;,.<>?]).*$/;\n\n    if (!regex.test(lozinka)) {\n      return 'Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter';\n    }\n\n    return 'ok';\n  }\n\n  proveraTelefon(telefon) {\n    const regex = /^\\+\\d{11,12}$/;\n\n    if (!regex.test(telefon)) {\n      return 'Telefon mora biti u formatu +381xxxxxxxxx';\n    }\n\n    return 'ok';\n  }\n\n  proveraMejl(mejl) {\n    const regex = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-z]+$/;\n\n    if (!regex.test(mejl)) {\n      return 'Neispravno uneta mejl adresa';\n    }\n\n    return 'ok';\n  }\n\n  proveraIme(ime) {\n    if (ime.length < 2 || ime.length > 20) {\n      return 'Ime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(ime)) {\n      return 'Ime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraPrezime(prezime) {\n    if (prezime.length < 2 || prezime.length > 20) {\n      return 'Prezime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(prezime)) {\n      return 'Prezime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraNazivAgencije(naziv) {\n    if (naziv.length < 3 || naziv.length > 30) {\n      return 'Naziv agencije mora imati izmedju 3 i 30 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9]+$/;\n\n    if (!regex.test(naziv)) {\n      return 'Naziv moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraUlica(ulica) {\n    if (ulica.length < 3 || ulica.length > 40) {\n      return 'Naziv ulice mora imati izmedju 3 i 40 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+ \\d{1,4}[A-Z]{0,2}$/;\n\n    if (!regex.test(ulica)) {\n      return 'Neispravno unet naziv ulice';\n    }\n\n    return 'ok';\n  }\n\n  proveraGrad(grad) {\n    if (grad.length < 2 || grad.length > 30) {\n      return 'Naziv grada mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n\n    if (!regex.test(grad)) {\n      return 'Neispravno unet naziv grada';\n    }\n\n    return 'ok';\n  }\n\n  proveraDrzava(drzava) {\n    if (drzava.length < 2 || drzava.length > 30) {\n      return 'Naziv drzave mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n\n    if (!regex.test(drzava)) {\n      return 'Neispravno unet naziv drzave';\n    }\n\n    return 'ok';\n  }\n\n  proveraMaticniBroj(maticniBroj) {\n    if (maticniBroj.length != 8) {\n      return 'Maticni broj mora imati tacno 8 cifara';\n    }\n\n    const regex = /^\\d{8}$/;\n\n    if (!regex.test(maticniBroj)) {\n      return 'Maticni broj moze sadrzati samo cifre';\n    }\n\n    return 'ok';\n  }\n\n  proveraKlijent(klijent) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.proveraKorisnickoIme(klijent.korisnickoIme) != 'ok') {\n        return _this.proveraKorisnickoIme(klijent.korisnickoIme);\n      }\n\n      if ((yield _this.korisnikServis.korisnikPostoji(klijent.korisnickoIme)) == true) {\n        return 'Korisnicko ime vec postoji';\n      }\n\n      if (_this.proveraLozinka(klijent.lozinka) != 'ok') {\n        return _this.proveraLozinka(klijent.lozinka);\n      }\n\n      if (_this.proveraTelefon(klijent.telefon) != 'ok') {\n        return _this.proveraTelefon(klijent.telefon);\n      }\n\n      if (_this.proveraMejl(klijent.mejl) != 'ok') {\n        return _this.proveraMejl(klijent.mejl);\n      }\n\n      if (_this.proveraIme(klijent.ime) != 'ok') {\n        return _this.proveraIme(klijent.ime);\n      }\n\n      if (_this.proveraPrezime(klijent.prezime) != 'ok') {\n        return _this.proveraPrezime(klijent.prezime);\n      }\n\n      return 'ok';\n    })();\n  }\n\n  proveraAgencija(agencija) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.proveraKorisnickoIme(agencija.korisnickoIme) != 'ok') {\n        return _this2.proveraKorisnickoIme(agencija.korisnickoIme);\n      }\n\n      if ((yield _this2.korisnikServis.korisnikPostoji(agencija.korisnickoIme)) == true) {\n        return 'Korisnicko ime vec postoji';\n      }\n\n      if (_this2.proveraLozinka(agencija.lozinka) != 'ok') {\n        return _this2.proveraLozinka(agencija.lozinka);\n      }\n\n      if (_this2.proveraTelefon(agencija.telefon) != 'ok') {\n        return _this2.proveraTelefon(agencija.telefon);\n      }\n\n      if (_this2.proveraMejl(agencija.mejl) != 'ok') {\n        return _this2.proveraMejl(agencija.mejl);\n      }\n\n      if (_this2.proveraNazivAgencije(agencija.naziv) != 'ok') {\n        return _this2.proveraNazivAgencije(agencija.naziv);\n      }\n\n      if (_this2.proveraUlica(agencija.ulica) != 'ok') {\n        return _this2.proveraUlica(agencija.ulica);\n      }\n\n      if (_this2.proveraGrad(agencija.grad) != 'ok') {\n        return _this2.proveraGrad(agencija.grad);\n      }\n\n      if (_this2.proveraDrzava(agencija.drzava) != 'ok') {\n        return _this2.proveraDrzava(agencija.drzava);\n      }\n\n      if (_this2.proveraMaticniBroj(agencija.maticniBroj) != 'ok') {\n        return _this2.proveraMaticniBroj(agencija.maticniBroj);\n      }\n\n      return 'ok';\n    })();\n  }\n\n}\n\nProveraService.ɵfac = function ProveraService_Factory(t) {\n  return new (t || ProveraService)(i0.ɵɵinject(i1.KorisnikService));\n};\n\nProveraService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProveraService,\n  factory: ProveraService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["ProveraService","constructor","korisnikServis","proveraKorisnickoIme","korisnickoIme","length","regex","test","proveraLozinka","lozinka","prviKarakter","charAt","proveraTelefon","telefon","proveraMejl","mejl","proveraIme","ime","proveraPrezime","prezime","proveraNazivAgencije","naziv","proveraUlica","ulica","proveraGrad","grad","proveraDrzava","drzava","proveraMaticniBroj","maticniBroj","proveraKlijent","klijent","korisnikPostoji","proveraAgencija","agencija","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\kosov\\OneDrive\\Dokumenti\\UredjivanjeProstoraAPP\\frontend\\src\\app\\services\\provera.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { KorisnikService } from './korisnik.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProveraService {\n  constructor(private korisnikServis: KorisnikService) {}\n\n  proveraKorisnickoIme(korisnickoIme: string) {\n    if (korisnickoIme.length < 3 || korisnickoIme.length > 20) {\n      return 'Korisnicko ime mora imati izmedju 3 i 20 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9]+$/;\n    if (!regex.test(korisnickoIme)) {\n      return 'Korisnicko ime moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraLozinka(lozinka: string) {\n    if (lozinka.length < 7 || lozinka.length > 12) {\n      return 'Lozinka mora imati izmedju 7 i 12 karaktera';\n    }\n\n    const prviKarakter = lozinka.charAt(0);\n    if (!/[a-zA-Z]/.test(prviKarakter)) {\n      return 'Lozinka mora pocinjati slovom';\n    }\n\n    const regex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#$%&*_\\-+=/|:;,.<>?]).*$/;\n    if (!regex.test(lozinka)) {\n      return 'Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter';\n    }\n\n    return 'ok';\n  }\n\n  proveraTelefon(telefon: string) {\n    const regex = /^\\+\\d{11,12}$/;\n    if (!regex.test(telefon)) {\n      return 'Telefon mora biti u formatu +381xxxxxxxxx';\n    }\n\n    return 'ok';\n  }\n\n  proveraMejl(mejl: string) {\n    const regex = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-z]+$/;\n    if (!regex.test(mejl)) {\n      return 'Neispravno uneta mejl adresa';\n    }\n\n    return 'ok';\n  }\n\n  proveraIme(ime: string) {\n    if (ime.length < 2 || ime.length > 20) {\n      return 'Ime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(ime)) {\n      return 'Ime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraPrezime(prezime: string) {\n    if (prezime.length < 2 || prezime.length > 20) {\n      return 'Prezime mora imati izmedju 2 i 20 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z]+$/;\n\n    if (!regex.test(prezime)) {\n      return 'Prezime mora pocinjati velikim slovom i sme sadrzati samo slova';\n    }\n\n    return 'ok';\n  }\n\n  proveraNazivAgencije(naziv: string) {\n    if (naziv.length < 3 || naziv.length > 30) {\n      return 'Naziv agencije mora imati izmedju 3 i 30 karaktera';\n    }\n\n    const regex = /^[a-zA-Z0-9]+$/;\n    if (!regex.test(naziv)) {\n      return 'Naziv moze sadrzati samo slova i brojeve';\n    }\n\n    return 'ok';\n  }\n\n  proveraUlica(ulica: string) {\n    if (ulica.length < 3 || ulica.length > 40) {\n      return 'Naziv ulice mora imati izmedju 3 i 40 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+ \\d{1,4}[A-Z]{0,2}$/;\n    if (!regex.test(ulica)) {\n      return 'Neispravno unet naziv ulice';\n    }\n\n    return 'ok';\n  }\n\n  proveraGrad(grad: string) {\n    if (grad.length < 2 || grad.length > 30) {\n      return 'Naziv grada mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n    if (!regex.test(grad)) {\n      return 'Neispravno unet naziv grada';\n    }\n\n    return 'ok';\n  }\n\n  proveraDrzava(drzava: string) {\n    if (drzava.length < 2 || drzava.length > 30) {\n      return 'Naziv drzave mora imati izmedju 2 i 30 karaktera';\n    }\n\n    const regex = /^[A-Z][a-zA-Z\\s]+$/;\n    if (!regex.test(drzava)) {\n      return 'Neispravno unet naziv drzave';\n    }\n\n    return 'ok';\n  }\n\n  proveraMaticniBroj(maticniBroj: string) {\n    if (maticniBroj.length != 8) {\n      return 'Maticni broj mora imati tacno 8 cifara';\n    }\n\n    const regex = /^\\d{8}$/;\n    if (!regex.test(maticniBroj)) {\n      return 'Maticni broj moze sadrzati samo cifre';\n    }\n\n    return 'ok';\n  }\n\n  async proveraKlijent(klijent) {\n    if (this.proveraKorisnickoIme(klijent.korisnickoIme) != 'ok') {\n      return this.proveraKorisnickoIme(klijent.korisnickoIme);\n    }\n    if (\n      (await this.korisnikServis.korisnikPostoji(klijent.korisnickoIme)) == true\n    ) {\n      return 'Korisnicko ime vec postoji';\n    }\n    if (this.proveraLozinka(klijent.lozinka) != 'ok') {\n      return this.proveraLozinka(klijent.lozinka);\n    }\n    if (this.proveraTelefon(klijent.telefon) != 'ok') {\n      return this.proveraTelefon(klijent.telefon);\n    }\n    if (this.proveraMejl(klijent.mejl) != 'ok') {\n      return this.proveraMejl(klijent.mejl);\n    }\n    if (this.proveraIme(klijent.ime) != 'ok') {\n      return this.proveraIme(klijent.ime);\n    }\n    if (this.proveraPrezime(klijent.prezime) != 'ok') {\n      return this.proveraPrezime(klijent.prezime);\n    }\n\n    return 'ok';\n  }\n\n  async proveraAgencija(agencija) {\n    if (this.proveraKorisnickoIme(agencija.korisnickoIme) != 'ok') {\n      return this.proveraKorisnickoIme(agencija.korisnickoIme);\n    }\n    if (\n      (await this.korisnikServis.korisnikPostoji(agencija.korisnickoIme)) ==\n      true\n    ) {\n      return 'Korisnicko ime vec postoji';\n    }\n    if (this.proveraLozinka(agencija.lozinka) != 'ok') {\n      return this.proveraLozinka(agencija.lozinka);\n    }\n    if (this.proveraTelefon(agencija.telefon) != 'ok') {\n      return this.proveraTelefon(agencija.telefon);\n    }\n    if (this.proveraMejl(agencija.mejl) != 'ok') {\n      return this.proveraMejl(agencija.mejl);\n    }\n    if (this.proveraNazivAgencije(agencija.naziv) != 'ok') {\n      return this.proveraNazivAgencije(agencija.naziv);\n    }\n    if (this.proveraUlica(agencija.ulica) != 'ok') {\n      return this.proveraUlica(agencija.ulica);\n    }\n    if (this.proveraGrad(agencija.grad) != 'ok') {\n      return this.proveraGrad(agencija.grad);\n    }\n    if (this.proveraDrzava(agencija.drzava) != 'ok') {\n      return this.proveraDrzava(agencija.drzava);\n    }\n    if (this.proveraMaticniBroj(agencija.maticniBroj) != 'ok') {\n      return this.proveraMaticniBroj(agencija.maticniBroj);\n    }\n\n    return 'ok';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/kosov/OneDrive/Dokumenti/UredjivanjeProstoraAPP/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class KorisnikService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:4000';\n  }\n\n  ubaciKorisnika(korisnickoIme, lozinka, tip) {\n    const korisnik = {\n      korisnickoIme: korisnickoIme,\n      lozinka: lozinka,\n      tip: tip,\n      status: 'na cekanju'\n    };\n    return this.http.post(`${this.url}/korisnik/ubaci`, korisnik);\n  }\n\n  dohvatiKorisnike() {\n    return this.http.get(`${this.url}/korisnik/dohvatiKorisnike`);\n  }\n\n  korisnikPostoji(korisnickoIme) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        _this.http.post(`${_this.url}/korisnik/korisnikPostoji`, {\n          korisnickoIme: korisnickoIme\n        }).subscribe(res => {\n          if (res['postoji'] == 'da') {\n            resolve(true);\n          } else {\n            resolve(false);\n          }\n        });\n      });\n    })();\n  }\n\n  proveraLozinke(lozinka) {\n    if (lozinka.length < 7 || lozinka.length > 12) {\n      return 'Lozinka mora imati izmedju 7 i 12 karaktera';\n    }\n\n    const prviKarakter = lozinka.charAt(0);\n\n    if (!/[a-zA-Z]/.test(prviKarakter)) {\n      return 'Lozinka mora pocinjati slovom';\n    }\n\n    const regex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#$%&*_\\-+=/|:;,.<>?]).*$/;\n\n    if (!regex.test(lozinka)) {\n      return 'Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter';\n    }\n\n    return 'ok';\n  }\n\n  azurirajPodatak(korisnickoIme, podatak, vrednost) {\n    return this.http.post(`${this.url}/korisnik/azuriraj`, {\n      korisnickoIme: korisnickoIme,\n      podatak: podatak,\n      vrednost: vrednost\n    });\n  }\n\n}\n\nKorisnikService.ɵfac = function KorisnikService_Factory(t) {\n  return new (t || KorisnikService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nKorisnikService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KorisnikService,\n  factory: KorisnikService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,eAAP,CAAsB;EAC1BC,YAAoBC,IAApB,EAAoC;IAAhB;IAEpB,WAAM,uBAAN;EAFwC;;EAIxCC,cAAc,CAACC,aAAD,EAAgBC,OAAhB,EAAyBC,GAAzB,EAA4B;IACxC,MAAMC,QAAQ,GAAG;MACfH,aAAa,EAAEA,aADA;MAEfC,OAAO,EAAEA,OAFM;MAGfC,GAAG,EAAEA,GAHU;MAIfE,MAAM,EAAE;IAJO,CAAjB;IAOA,OAAO,KAAKN,IAAL,CAAUO,IAAV,CAAe,GAAG,KAAKC,GAAG,iBAA1B,EAA6CH,QAA7C,CAAP;EACD;;EAEDI,gBAAgB;IACd,OAAO,KAAKT,IAAL,CAAUU,GAAV,CAAc,GAAG,KAAKF,GAAG,4BAAzB,CAAP;EACD;;EAEKG,eAAe,CAACT,aAAD,EAAc;IAAA;;IAAA;MACjC,OAAO,IAAIU,OAAJ,CAAaC,OAAD,IAAY;QAC7B,KAAI,CAACb,IAAL,CACGO,IADH,CACQ,GAAG,KAAI,CAACC,GAAG,2BADnB,EACgD;UAC5CN,aAAa,EAAEA;QAD6B,CADhD,EAIGY,SAJH,CAIcC,GAAD,IAAQ;UACjB,IAAIA,GAAG,CAAC,SAAD,CAAH,IAAkB,IAAtB,EAA4B;YAC1BF,OAAO,CAAC,IAAD,CAAP;UACD,CAFD,MAEO;YACLA,OAAO,CAAC,KAAD,CAAP;UACD;QACF,CAVH;MAWD,CAZM,CAAP;IADiC;EAclC;;EAEDG,cAAc,CAACb,OAAD,EAAgB;IAC5B,IAAIA,OAAO,CAACc,MAAR,GAAiB,CAAjB,IAAsBd,OAAO,CAACc,MAAR,GAAiB,EAA3C,EAA+C;MAC7C,OAAO,6CAAP;IACD;;IAED,MAAMC,YAAY,GAAGf,OAAO,CAACgB,MAAR,CAAe,CAAf,CAArB;;IACA,IAAI,CAAC,WAAWC,IAAX,CAAgBF,YAAhB,CAAL,EAAoC;MAClC,OAAO,+BAAP;IACD;;IAED,MAAMG,KAAK,GAAG,sDAAd;;IACA,IAAI,CAACA,KAAK,CAACD,IAAN,CAAWjB,OAAX,CAAL,EAA0B;MACxB,OAAO,sFAAP;IACD;;IAED,OAAO,IAAP;EACD;;EAEDmB,eAAe,CAACpB,aAAD,EAAgBqB,OAAhB,EAAyBC,QAAzB,EAAiC;IAC9C,OAAO,KAAKxB,IAAL,CAAUO,IAAV,CAAe,GAAG,KAAKC,GAAG,oBAA1B,EAAgD;MACrDN,aAAa,EAAEA,aADsC;MAErDqB,OAAO,EAAEA,OAF4C;MAGrDC,QAAQ,EAAEA;IAH2C,CAAhD,CAAP;EAKD;;AA5DyB;;;mBAAf1B,iBAAe2B;AAAA;;;SAAf3B;EAAe4B,SAAf5B,eAAe;EAAA6B,YAFd","names":["KorisnikService","constructor","http","ubaciKorisnika","korisnickoIme","lozinka","tip","korisnik","status","post","url","dohvatiKorisnike","get","korisnikPostoji","Promise","resolve","subscribe","res","proveraLozinke","length","prviKarakter","charAt","test","regex","azurirajPodatak","podatak","vrednost","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\kosov\\OneDrive\\Dokumenti\\UredjivanjeProstoraAPP\\frontend\\src\\app\\services\\korisnik.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KorisnikService {\n  constructor(private http: HttpClient) {}\n\n  url = 'http://localhost:4000';\n\n  ubaciKorisnika(korisnickoIme, lozinka, tip) {\n    const korisnik = {\n      korisnickoIme: korisnickoIme,\n      lozinka: lozinka,\n      tip: tip,\n      status: 'na cekanju',\n    };\n\n    return this.http.post(`${this.url}/korisnik/ubaci`, korisnik);\n  }\n\n  dohvatiKorisnike() {\n    return this.http.get(`${this.url}/korisnik/dohvatiKorisnike`);\n  }\n\n  async korisnikPostoji(korisnickoIme): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.http\n        .post(`${this.url}/korisnik/korisnikPostoji`, {\n          korisnickoIme: korisnickoIme,\n        })\n        .subscribe((res) => {\n          if (res['postoji'] == 'da') {\n            resolve(true);\n          } else {\n            resolve(false);\n          }\n        });\n    });\n  }\n\n  proveraLozinke(lozinka: string) {\n    if (lozinka.length < 7 || lozinka.length > 12) {\n      return 'Lozinka mora imati izmedju 7 i 12 karaktera';\n    }\n\n    const prviKarakter = lozinka.charAt(0);\n    if (!/[a-zA-Z]/.test(prviKarakter)) {\n      return 'Lozinka mora pocinjati slovom';\n    }\n\n    const regex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!\"#$%&*_\\-+=/|:;,.<>?]).*$/;\n    if (!regex.test(lozinka)) {\n      return 'Lozinka mora sadrzati bar jedno veliko slovo, jedan broj i jedan specijalni karakter';\n    }\n\n    return 'ok';\n  }\n\n  azurirajPodatak(korisnickoIme, podatak, vrednost) {\n    return this.http.post(`${this.url}/korisnik/azuriraj`, {\n      korisnickoIme: korisnickoIme,\n      podatak: podatak,\n      vrednost: vrednost,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}